"""
Task:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Idea:
1) calculate many primes in advance
2) check numbers (ascending) for it"s number of divisors via its prime factors
"""
import time


def main():
    start_time = time.time()

    primes = primes_to(1000000)

    triangle_number = 1
    n = 2
    while get_num_of_divisors(triangle_number, primes) <= 500:
        triangle_number += n
        n += 1


    print("first number with over 500 divisors:", triangle_number)
    print("time:", time.time() - start_time)


def get_num_of_divisors(n, primes):
    num_of_divisors = 1
    for value in factorization(n, primes).values():
        num_of_divisors *= (value + 1)
    return num_of_divisors


def factorization(n, primes):
    """
    :param n: number to factorize
    :param primes: list with primes
    :return: dictionary with primes that occur (and count of them)
    """
    factors = {}

    while n != 1:
        for prime in primes:
            if n % prime == 0:
                n /= prime
                if prime in factors:
                    factors[prime] += 1
                else:
                    factors[prime] = 1
                break
    return factors


def primes_to(limit):

    # list containing for every number whether it has been marked already
    numbers = {}
    for x in range(3, limit, 2):
        numbers[x] = False

    primes = [2, 3]

    p = 3
    while p < limit:
        for i in range(p, limit, p):
            numbers[i] = True

        for i in range(p, limit, 2):
            if not numbers[i]:
                p = i
                numbers[i] = True
                primes.append(i)
                break
            else:
                p += 1

    return primes


if __name__ == '__main__':
    main()
